package com.progetto_sicurezza.virusTotal;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.sql.SQLException;
import java.util.Map;

import com.kanishka.virustotal.dto.FileScanReport;
import com.kanishka.virustotal.dto.ScanInfo;
import com.kanishka.virustotal.dto.VirusScanInfo;
import com.kanishka.virustotal.exception.APIKeyNotFoundException;
import com.kanishka.virustotal.exception.QuotaExceededException;
import com.kanishka.virustotal.exception.UnauthorizedAccessException;
import com.kanishka.virustotalv2.VirusTotalConfig;
import com.kanishka.virustotalv2.VirustotalPublicV2;
import com.kanishka.virustotalv2.VirustotalPublicV2Impl;
import com.progetto_sicurezza.dao.AntiMalwareDao;
import com.progetto_sicurezza.dao.MalwareDao;
import com.progetto_sicurezza.dao.ScanPostTransDao;
import com.progetto_sicurezza.model.ScanPostTrans;

public class VirusScan
{
	private static int count=0;
	/**
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) throws IOException
	{
	    String sourceDir = args[0]; // directory sorgente
	    String destDir = args[1];   // directory destinazione
	    
		File f = new File(sourceDir);
		File[] listFile = f.listFiles();
		
		while(listFile.length > 0)
		{
			for(int i=0;i<listFile.length;i++)
			{
				if(!scanFile(listFile[i],destDir))
					count++;
				
				if(count == 10)
				{
					count = 0;
					listFile=f.listFiles(); 
					break;
				}
			}

		}
		
	}
	
	/*
	 * true: scansione file terminata
	 * false: scansione file accodata
	 */
	private static boolean scanFile(File f, String destinationPath)
	{
        try
        {
            VirusTotalConfig.getConfigInstance().setVirusTotalAPIKey(ApiDetails.API_KEY);
            VirustotalPublicV2 virusTotalRef = new VirustotalPublicV2Impl();
            
            // upload and send request
            ScanInfo scanInformation = virusTotalRef.scanFile(new File(f.getPath()));
            System.out.println("Scan File: "+f.getPath());
            System.out.println("___SCAN INFORMATION___");
            System.out.println("MD5 :\t" + scanInformation.getMd5());
            System.out.println("Perma Link :\t" + scanInformation.getPermalink());
            System.out.println("Resource :\t" + scanInformation.getResource());
            System.out.println("Scan Date :\t" + scanInformation.getScanDate());
            System.out.println("Scan Id :\t" + scanInformation.getScanId());
            System.out.println("SHA1 :\t" + scanInformation.getSha1());
            System.out.println("SHA256 :\t" + scanInformation.getSha256());
            System.out.println("Verbose Msg :\t" + scanInformation.getVerboseMessage());
            System.out.println("Response Code :\t" + scanInformation.getResponseCode());
            System.out.println("done.");
            
            //Get file scan report
            String resource=scanInformation.getResource();
            FileScanReport report = virusTotalRef.getScanReport(resource);

            System.out.println("MD5 :\t" + report.getMd5());
            System.out.println("Perma link :\t" + report.getPermalink());
            System.out.println("Resource :\t" + report.getResource());
            System.out.println("Scan Date :\t" + report.getScanDate());
            System.out.println("Scan Id :\t" + report.getScanId());
            System.out.println("SHA1 :\t" + report.getSha1());
            System.out.println("SHA256 :\t" + report.getSha256());
            System.out.println("Verbose Msg :\t" + report.getVerboseMessage());
            System.out.println("Response Code :\t" + report.getResponseCode());
            System.out.println("Positives :\t" + report.getPositives());
            System.out.println("Total :\t" + report.getTotal());
            Map<String, VirusScanInfo> scans=report.getScans();

            // if results not ready yet
            if(report.getPermalink()==null)
            	return false;
            	
        
            AntiMalwareDao amdao = new AntiMalwareDao();
    	    MalwareDao madao = new MalwareDao();
            
    	    // get results
            // scorri lista di risultati
           for (String key : scans.keySet()) 
           {
                VirusScanInfo virusInfo = scans.get(key);
                System.out.println("Scanner : " + key);
                System.out.println("\t\t Resut : " + virusInfo.getResult());
                System.out.println("\t\t Update : " + virusInfo.getUpdate());
                System.out.println("\t\t Version :" + virusInfo.getVersion());
                
               
        		int idAntimalware=amdao.getAntiMalwareByName(key).getId();
        		int idMalware=madao.getMalwareByStrIdentifier(f.getName()).getId();
        		
        		/*
        		//riempimento tabella ScanPreTrans
        		ScanPreTrans spt=new ScanPreTrans();
        		ScanPreTransDao sptdao=new ScanPreTransDao();
        		spt.setIdAntimalware(idAntimalware);
        		spt.setIdMalware(idMalware);
        		if(virusInfo.getResult()!=null)
        		spt.setScanResultIsMalicious("T");
        		else
        			spt.setScanResultIsMalicious("F");
        		spt.setUpdateSignaturesId(virusInfo.getUpdate());
        		sptdao.insert(spt);
        		*/
        		
        		//riempimento tabella ScanPostTrans
        		ScanPostTransDao sptdaopost=new ScanPostTransDao();
        		ScanPostTrans sptpost=new ScanPostTrans();
        		sptpost.setIdAntiMalware(idAntimalware);
        		sptpost.setIdMalware(idMalware);
        		if(virusInfo.getResult()!=null)
        		sptpost.setScanResultIsMalicious("T");
        		else
        			sptpost.setScanResultIsMalicious("F");
        		sptpost.setAmSignatureUpdateId(virusInfo.getUpdate());
        		
        		//set delle trasformazioni effettuate sul virus da analizzare
        		sptpost.setDissAndReass(true);
        		sptpost.setRepacking(true);
        		sptpost.setChangingPackage(true);
        		sptpost.setCallIndirection(false);
        		sptpost.setChangingClassname(true);
        		sptpost.setCodeReorder(false);
        		sptpost.setDataEncoding(false);
        		sptpost.setJunkNop(false);
        		sptpost.setJunkNopUncJump(false);
        		sptpost.setJunkRandomGarbage(false);
        		System.out.println(sptdaopost.insert(sptpost));
            }           
            //fileAnalyzed.add(f.getPath());
            if(f.renameTo(new File(destinationPath +"\\"+f.getName())))
            {
             System.out.println("File is moved successful!");
            }
            else
            {
             System.out.println("File is failed to move!");
            }
             	    
        } catch (APIKeyNotFoundException ex) {
            System.err.println("API Key not found! " + ex.getMessage());
        } catch (UnsupportedEncodingException ex) {
            System.err.println("Unsupported Encoding Format!" + ex.getMessage());
        } catch (UnauthorizedAccessException ex) {
            System.err.println("Invalid API Key " + ex.getMessage());
        } catch (SQLException ex) 
        {
        	ex.printStackTrace();
            System.err.println("Something Bad Happened! " + ex.getMessage());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (QuotaExceededException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
		return true;
	}
}
