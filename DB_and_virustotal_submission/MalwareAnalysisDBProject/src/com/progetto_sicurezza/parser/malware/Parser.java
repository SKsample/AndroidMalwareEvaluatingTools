package com.progetto_sicurezza.parser.malware;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.StringTokenizer;

import com.progetto_sicurezza.dao.MalwareDao;
import com.progetto_sicurezza.dao.MalwareFamilyDao;
import com.progetto_sicurezza.model.Malware;
import com.progetto_sicurezza.model.MalwareFamily;


public class Parser {

public static HashMap <String, String> hm ;	
public static ArrayList <String> ar;
	public static void main(String args[]) throws ClassNotFoundException, SQLException{
		
		
		 getFamilyNameDB("C:\\Users\\Raffaele Esposito\\Desktop\\sha256_family.csv", 
				 "C:\\Users\\Raffaele Esposito\\Desktop\\drebin-33\\drebin-33");
		 // 
	
	}
	
	
	public static HashMap<String, String> getFamilyName (String arg1){

		File x = new File(arg1);
		Scanner read = null;
		try {
			read = new Scanner(x);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
        HashMap<String,String> hm = new HashMap<String,String>();
       
        String string = "";
        StringTokenizer tok;
        String temp = "";
        while(read.hasNextLine())
        {
        string = read.nextLine();
        tok=new StringTokenizer(string, ",");
        temp=tok.nextToken();
        hm.put(temp ,tok.nextToken());
        }
        read.close();
        return hm;
	}
	/*
	 * Popola le tabelle malwareFamily && malware
	 */
	public static void  getFamilyNameDB (String arg1, String arg2) throws ClassNotFoundException, SQLException{

    	MalwareFamilyDao mfd = new MalwareFamilyDao();

		
		File x = new File(arg1);
		Scanner read = null;
		try {
			read = new Scanner(x);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
         hm = new HashMap<String,String>();
         ar = new ArrayList<String>();
        String string = "";
        StringTokenizer tok;
        String temp = "";
        while(read.hasNextLine())
        {
        string = read.nextLine();
        tok=new StringTokenizer(string, ",");
        temp=tok.nextToken();
        ar.add(temp); //array con i nomi dei virus
        hm.put(temp ,tok.nextToken()); //hash map con nome virus e famiglia
        }
        
        //inserimento malware family
    /*   for(int i=0; i<ar.size(); i++)
       {
       	String insert = hm.get(ar.get(i));
      
       	if(mfd.getMalwareFamilyByName(insert)==null)
       	{
       		MalwareFamily mf = new MalwareFamily();
       		mf.setFamily_name(insert);
       		mfd.insert(mf);
   		
       	}
        }*/

         Malware m = null ;

        for(int i=0; i<ar.size(); i++)
        {
        	m = new Malware();
        	m.setMalwareStrId(ar.get(i));
        	MalwareFamily s=mfd.getMalwareFamilyByName(hm.get(ar.get(i)));
        	m.setIdFamily(s.getId());
        	//md.insert(m);	
        
        File dir = new File(arg2);
        try {
			navigateDirectoryContents(dir, m);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        }
        read.close();
        
	}
	
	private static void navigateDirectoryContents(File dir, Malware m) throws UnsupportedEncodingException, IOException, ClassNotFoundException, SQLException
	{
		File[] files = dir.listFiles();
		for (File file : files)
		{
			if(file.isDirectory())
			navigateDirectoryContents(file, m);
			
			if (!file.isDirectory() && file.getName().equals(m.getMalwareStrId()))
			{
				
				process(file.getCanonicalPath(), m);
			}
			
		}
}


	private static void process(String canonicalPath, Malware m) throws ClassNotFoundException, SQLException {
	
		MalwareDao md = new MalwareDao();
    //	File x = new File(canonicalPath);
    //	float index = (float) x.length()/1000;
    //	System.out.println(x.getName());
    //	Malware m =md.getMalwareByStrIdentifier(x.getName());
    	//m.setKbDim(index);
    	if(md.getMalwareByStrIdentifier(m.getMalwareStrId())==null)
        md.insert(m);	

        
		
	}

	
	
}
