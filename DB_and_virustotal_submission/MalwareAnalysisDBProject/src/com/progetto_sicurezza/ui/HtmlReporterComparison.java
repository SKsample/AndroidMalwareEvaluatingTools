package com.progetto_sicurezza.ui;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import com.progetto_sicurezza.dbconfig.DBConfiguration;

public class HtmlReporterComparison
{
	
final static String CHAR_ENCODING = "UTF-8";
	
	public static void showResultsComparisonMalware_bf(boolean disass_and_reass ,boolean repacking_signature,
					                                boolean call_indirection,boolean identifier_renaming_package,
					                                boolean identifier_renaming_classname,boolean code_reorder,
					                                boolean data_encoding, boolean junk_nop,
					                                boolean junk_nop_unc_jump, boolean junk_random_garbage) throws SQLException, IOException
	{
		Connection dbCon = DriverManager.getConnection(DBConfiguration.DB_URL,DBConfiguration.USERNAME,DBConfiguration.PASSWORD);
		Statement stmt;
        ResultSet rs;
        
        // estrarre da scans_post_transformations le scansioni antimalware - malware relative
        // ad un certo set di trasformazioni:
        // fissati i valori dei campi disass_and_reass ,repacking,
        // call_indirection,identifier_renaming_package,
        // identifier_renaming_classname,code_reorder,data_encoding,junk_nop,
        // junk_nop_unc_jump,junk_random_garbage
        // i campi id_malware e id_anti_malware sono chiave nella tab composta dai campi:
        // id_malware,id_anti_malware,scan_result_is_malicious
		String query = "CREATE TEMPORARY TABLE IF NOT EXISTS post_temp AS " +
				       "(" +
					       "SELECT id_malware,id_anti_malware,scan_result_is_malicious " +
					       "FROM scans_post_transformations " +
					       "WHERE " +
					       "disass_and_reass = " + disass_and_reass + " AND " +
	                  	   "repacking = " + repacking_signature + " AND " +
	                  	   "call_indirection = " + call_indirection + " AND " + 
	                  	   "changing_package = " + identifier_renaming_package + " AND " +
	                  	   "changing_classname = " + identifier_renaming_classname + " AND " +
	                  	   "code_reorder = " + code_reorder + " AND " +
	                  	   "data_encoding = " + data_encoding + " AND " +
	                  	   "junk_nop = " + junk_nop + " AND " +
	                  	   "junk_nop_unc_jump = " + junk_nop_unc_jump + " AND " +
	                  	   "junk_random_garbage = " + junk_random_garbage + 
                  	   " ); ";

		stmt = dbCon.createStatement();
		System.out.println(query);
		stmt.execute(query);
		
		// dal prodotto cartesiamo post_temp,scans_pre_transformations
		// selezionamo le coppie scansioni pre e post che fanno riferimento 
		// allo stesso malware ed antimalware 
		// raggruppiamo per id_malware
		// e recuperiamo le info di interesse
		query = 	    "SELECT tmp_table.id_malware,totalScans," +
				        "totalMaliciousPre,(totalMaliciousPre/totalScans)*100 as 'malicious_on_total_pre_%'," +
				        "totalCleanPre, (totalCleanPre/totalScans)*100 as 'clean_on_total_pre_%'," +
						"totalMaliciousPost, (totalMaliciousPost/totalScans)*100 as 'malicious_on_total_post%'," +
						"totalCleanPost, (totalCleanPost/totalScans)*100 as 'clean_on_total_post_%' " +
						"FROM " +
						"( " +
							"SELECT post_temp.id_malware,count(*) as totalScans, " +
							"SUM(scans_pre_transformations.scan_result_is_malicious = 'T' ) totalMaliciousPre, " +
							"SUM(scans_pre_transformations.scan_result_is_malicious = 'F' ) as totalCleanPre, " +
							"SUM(post_temp.scan_result_is_malicious = 'T' ) totalMaliciousPost, " +
							"SUM(post_temp.scan_result_is_malicious = 'F' ) totalCleanPost " +
							"FROM post_temp,scans_pre_transformations " +
							"WHERE post_temp.id_malware = scans_pre_transformations.id_malware " +
							"AND post_temp.id_anti_malware = scans_pre_transformations.id_anti_malware " +
							"GROUP BY post_temp.id_malware " +
					    " ) as tmp_table ORDER BY (totalCleanPost/totalScans) DESC;";

		System.out.println(query);
		rs = stmt.executeQuery(query);
		
		// descrizione risultati query
		String descriptionTable = "<b>totalScans:</b> numero di anti-malware che hanno scansionato il malware in questione sia <b>PRIMA</b> che <b>DOPO</b> le trasformazioni.<br>" +
								  "<b>totalMaliciousPre:</b> numero di anti-malware che giudicano il malware MALICIOUS <b>PRIMA</b> delle trasformazioni.<br>" +
								  "<b>totalCleanPre:</b> numero di anti-malware che giudicano il malware come NON MALICIOUS <b>PRIMA</b> delle trasformazioni.<br>" +
								  "<b>totalMaliciousPost:</b>  numero di anti-malware che giudicano il malware MALICIOUS <b>DOPO</b> le trasformazioni.<br>" +
								  "<b>totalCleanPost:</b>  numero di anti-malware che giudicano il malware NON MALICIOUS <b>DOPO</b> le trasformazioni.<br>" +
								  "<b>MaliciousToClean:</b> numero di antivirus che hanno rilevato il malware come MALICIOUS <b>PRIMA</b> delle trasformazioni e NON MALICIOUS <b>DOPO</b> le trasformazioni.<br>" +
								  "Le righe sono state ordinate secondo valori discendenti del rapporto totalCleanPost/totalScans<br>";

		HtmlReporterPre.printHtml(rs,descriptionTable,"ResultsComparisonMalware_bf");
	}
	
	
	public static void showResultsComparisonMalware_flows_bf(boolean disass_and_reass ,boolean repacking_signature,
            boolean call_indirection,boolean identifier_renaming_package,
            boolean identifier_renaming_classname,boolean code_reorder,
            boolean data_encoding, boolean junk_nop,
            boolean junk_nop_unc_jump, boolean junk_random_garbage) throws SQLException, IOException
    {
		Connection dbCon = DriverManager.getConnection(DBConfiguration.DB_URL,DBConfiguration.USERNAME,DBConfiguration.PASSWORD);
		Statement stmt;
		ResultSet rs;

        // estrarre da scans_post_transformations le scansioni antimalware - malware relative
        // ad un certo set di trasformazioni:
        // fissati i valori dei campi disass_and_reass ,repacking,
        // call_indirection,identifier_renaming_package,
        // identifier_renaming_classname,code_reorder,data_encoding,junk_nop,
        // junk_nop_unc_jump,junk_random_garbage
        // i campi id_malware e id_anti_malware sono chiave nella tab composta dai campi:
        // id_malware,id_anti_malware,scan_result_is_malicious
		String query = "CREATE TEMPORARY TABLE IF NOT EXISTS post_temp AS " +
						"(" +
						"SELECT id_malware,id_anti_malware,scan_result_is_malicious " +
						"FROM scans_post_transformations " +
						"WHERE " +
						"disass_and_reass = " + disass_and_reass + " AND " +
						"repacking = " + repacking_signature + " AND " +
						"call_indirection = " + call_indirection + " AND " + 
						"changing_package = " + identifier_renaming_package + " AND " +
						"changing_classname = " + identifier_renaming_classname + " AND " +
						"code_reorder = " + code_reorder + " AND " +
						"data_encoding = " + data_encoding + " AND " +
						"junk_nop = " + junk_nop + " AND " +
						"junk_nop_unc_jump = " + junk_nop_unc_jump + " AND " +
						"junk_random_garbage = " + junk_random_garbage + 
						" ); ";		
		
		stmt = dbCon.createStatement();
		System.out.println(query);
		stmt.execute(query);

		// dal prodotto cartesiamo post_temp,scans_pre_transformations
		// selezionamo le coppie scansioni pre e post che fanno riferimento 
		// allo stesso malware ed antimalware 
		// raggruppiamo per id_malware
		// e recuperiamo le info di interesse
		query = 	    "SELECT tmp_table.id_malware,totalScans," +
						"MaliciousToClean,IF(totalMaliciousPre = 0, NULL, (MaliciousToClean/totalMaliciousPre)*100) as 'MTC_on_malicious_pre%', " +
						"MaliciousToMalicious,IF(totalMaliciousPre = 0, NULL,(MaliciousToMalicious/totalMaliciousPre)*100) as 'MTM_on_malicious_pre%'" +
						",CleanToMalicious,IF(totalCleanPre = 0, NULL, (CleanToMalicious/totalCleanPre)*100) as 'CTM_on_clean_pre%', " +
						"CleanToClean , IF(totalCleanPre = 0, NULL, (CleanToClean/totalCleanPre)*100) as 'CTC_on_clean_pre%' " +
						"FROM " +
						"( " +
							"SELECT post_temp.id_malware,count(*) as totalScans, " +
							"SUM(scans_pre_transformations.scan_result_is_malicious = 'T' ) totalMaliciousPre, " +
							"SUM(scans_pre_transformations.scan_result_is_malicious = 'F' ) as totalCleanPre, " +
							"SUM(post_temp.scan_result_is_malicious = 'T' ) totalMaliciousPost, " +
							"SUM(post_temp.scan_result_is_malicious = 'F' ) totalCleanPost, " +
							"SUM(post_temp.scan_result_is_malicious = 'F' " +
							"AND scans_pre_transformations.scan_result_is_malicious = 'T' ) MaliciousToClean, " +
							"SUM(post_temp.scan_result_is_malicious = 'T' " +
							"AND scans_pre_transformations.scan_result_is_malicious = 'T')  MaliciousToMalicious, " +
							"SUM(post_temp.scan_result_is_malicious = 'F' " +
							"AND scans_pre_transformations.scan_result_is_malicious = 'F')  CleanToClean, " +
							"SUM(post_temp.scan_result_is_malicious = 'T' " +
							"AND scans_pre_transformations.scan_result_is_malicious = 'F')  CleanToMalicious " +
							"FROM post_temp,scans_pre_transformations " +
							"WHERE post_temp.id_malware = scans_pre_transformations.id_malware " +
							"AND post_temp.id_anti_malware = scans_pre_transformations.id_anti_malware " +
							"GROUP BY post_temp.id_malware " +
						" ) as tmp_table ORDER BY IF(totalMaliciousPre = 0, NULL, (MaliciousToClean/totalMaliciousPre)*100) DESC;";
		
		System.out.println(query);
		rs = stmt.executeQuery(query);
		
		// descrizione risultati query
		String descriptionTable = "<b>totalScans:</b> numero di anti-malware che hanno scansionato il malware <b>PRIMA</b> e <b>DOPO</b> le trasformazioni.<br>" +
		"<b>MaliciousToClean:</b> numero di antivirus che hanno rilevato il malware come MALICIOUS <b>PRIMA</b> delle trasformazioni e NON MALICIOUS <b>DOPO</b> le trasformazioni.<br>" +
		"<b>MaliciousToMalicious:</b> numero di antivirus che hanno rilevato il malware come MALICIOUS <b>PRIMA</b> delle trasformazioni e anche <b>DOPO</b> le trasformazioni.<br>" +
		"<b>CleanToClean:</b> numero di antivirus che hanno rilevato il malware come NON MALICIOUS <b>PRIMA</b> delle trasformazioni e anche <b>DOPO</b> le trasformazioni.<br>" +
		"<b>CleanToMalicious:</b> numero di antivirus che hanno rilevato il malware come NON MALICIOUS <b>PRIMA</b> delle trasformazioni e MALICIOUS <b>DOPO</b> le trasformazioni.<br>" +
		"Le righe sono ordinate per valori discendenti del rapporto MaliciousToClean/(MaliciousToClean + MaliciousToMalicious)<br>";
		
		HtmlReporterPre.printHtml(rs,descriptionTable,"ResultsComparisonMalware_flows_bf");
    }

	public static void showResultsComparisonAntimalware_wf( boolean disass_and_reass ,boolean repacking_signature,
	           boolean call_indirection,boolean identifier_renaming_package,
	           boolean identifier_renaming_classname,boolean code_reorder,
	           boolean data_encoding, boolean junk_nop,
	           boolean junk_nop_unc_jump, boolean junk_random_garbage) throws SQLException, IOException
	{	
		Connection dbCon = DriverManager.getConnection(DBConfiguration.DB_URL,DBConfiguration.USERNAME,DBConfiguration.PASSWORD);
		Statement stmt;
        ResultSet rs;
        
        // estrarre da scans_post_transformations le scansioni antimalware - malware relative
        // ad un certo set di trasformazioni:
        // fissati i valori dei campi disass_and_reass ,repacking,
        // call_indirection,identifier_renaming_package,
        // identifier_renaming_classname,code_reorder,data_encoding,junk_nop,
        // junk_nop_unc_jump,junk_random_garbage
        // i campi id_malware e id_anti_malware sono chiave nella tab composta dai campi:
        // id_malware,id_anti_malware,scan_result_is_malicious
		String query = "CREATE TEMPORARY TABLE IF NOT EXISTS post_temp AS " +
				       "(" +
					       "SELECT id_malware,id_anti_malware,scan_result_is_malicious " +
					       "FROM scans_post_transformations " +
					       "WHERE " +
					       "disass_and_reass = " + disass_and_reass + " AND " +
	                  	   "repacking = " + repacking_signature + " AND " +
	                  	   "call_indirection = " + call_indirection + " AND " + 
	                  	   "changing_package = " + identifier_renaming_package + " AND " +
	                  	   "changing_classname = " + identifier_renaming_classname + " AND " +
	                  	   "code_reorder = " + code_reorder + " AND " +
	                  	   "data_encoding = " + data_encoding + " AND " +
	                  	   "junk_nop = " + junk_nop + " AND " +
	                  	   "junk_nop_unc_jump = " + junk_nop_unc_jump + " AND " +
	                  	   "junk_random_garbage = " + junk_random_garbage + 
               	   " ); ";
		
		stmt = dbCon.createStatement();

		System.out.println(query);
		stmt.execute(query);
		
		// dal prodotto cartesiamo post_temp,scans_pre_transformations
		// selezionamo le coppie scansioni pre e post che fanno riferimento 
		// allo stesso malware ed antimalware 
		// raggruppiamo per id_anti_malware
		// e recuperiamo le info di interesse
		query = 	"SELECT tmp_table.id_anti_malware,tmp_table.nome,totalScans,totalMaliciousPre,(totalMaliciousPre/totalScans)*100 as 'malicious_on_total_pre_%',totalCleanPre, (totalCleanPre/totalScans)*100 as 'clean_on_total_pre_%'," +
					"totalMaliciousPost,(totalMaliciousPost/totalScans)*100 as 'malicious_on_total_post_%',totalCleanPost, (totalCleanPost/totalScans)*100 as 'clean_on_total_post_%' " +
					"FROM " +
					"( " +
						"SELECT post_temp.id_anti_malware,anti_malware.nome,count(*) totalScans, " +
						"SUM(scans_pre_transformations.scan_result_is_malicious = 'T' ) totalMaliciousPre, " +
						"SUM(scans_pre_transformations.scan_result_is_malicious = 'F' ) totalCleanPre, " +
						"SUM(post_temp.scan_result_is_malicious = 'T' ) totalMaliciousPost, " +
						"SUM(post_temp.scan_result_is_malicious = 'F' ) totalCleanPost  " +
						"FROM post_temp,scans_pre_transformations,anti_malware " +
						"WHERE post_temp.id_malware = scans_pre_transformations.id_malware " +
						"AND post_temp.id_anti_malware = scans_pre_transformations.id_anti_malware " +
						"AND post_temp.id_anti_malware = anti_malware.id " +
						"GROUP BY post_temp.id_anti_malware,anti_malware.nome " +
				    " ) as tmp_table ORDER BY totalCleanPost/totalScans  DESC;";    

		System.out.println(query);

		rs = stmt.executeQuery(query);
		
		// descrizione risultati query
		String descriptionTable = "Le righe sono ordinate per valori discendenti del rapporto totalCleanPost/totalScans<br>";

		HtmlReporterPre.printHtml(rs,descriptionTable,"ResultsComparisonAntimalware_wf");
	}
	
	public static void showResultsComparisonAntimalware_wf_flows( boolean disass_and_reass ,boolean repacking_signature,
	           boolean call_indirection,boolean identifier_renaming_package,
	           boolean identifier_renaming_classname,boolean code_reorder,
	           boolean data_encoding, boolean junk_nop,
	           boolean junk_nop_unc_jump, boolean junk_random_garbage) throws SQLException, IOException
	{	
		Connection dbCon = DriverManager.getConnection(DBConfiguration.DB_URL,DBConfiguration.USERNAME,DBConfiguration.PASSWORD);
		Statement stmt;
        ResultSet rs;
  
        
        // estrarre da scans_post_transformations le scansioni antimalware - malware relative
        // ad un certo set di trasformazioni:
        // fissati i valori dei campi disass_and_reass ,repacking,
        // call_indirection,identifier_renaming_package,
        // identifier_renaming_classname,code_reorder,data_encoding,junk_nop,
        // junk_nop_unc_jump,junk_random_garbage
        // i campi id_malware e id_anti_malware sono chiave nella tab composta dai campi:
        // id_malware,id_anti_malware,scan_result_is_malicious
			String query = "CREATE TEMPORARY TABLE IF NOT EXISTS post_temp AS " +
					       "(" +
						       "SELECT id_malware,id_anti_malware,scan_result_is_malicious " +
						       "FROM scans_post_transformations " +
						       "WHERE " +
						       "disass_and_reass = " + disass_and_reass + " AND " +
		                  	   "repacking = " + repacking_signature + " AND " +
		                  	   "call_indirection = " + call_indirection + " AND " + 
		                  	   "changing_package = " + identifier_renaming_package + " AND " +
		                  	   "changing_classname = " + identifier_renaming_classname + " AND " +
		                  	   "code_reorder = " + code_reorder + " AND " +
		                  	   "data_encoding = " + data_encoding + " AND " +
		                  	   "junk_nop = " + junk_nop + " AND " +
		                  	   "junk_nop_unc_jump = " + junk_nop_unc_jump + " AND " +
		                  	   "junk_random_garbage = " + junk_random_garbage + 
	            	   " ); ";
			
			stmt = dbCon.createStatement();
	
			System.out.println(query);
			stmt.execute(query);
			
			// dal prodotto cartesiamo post_temp,scans_pre_transformations
			// selezionamo le coppie scansioni pre e post che fanno riferimento 
			// allo stesso malware ed antimalware 
			// raggruppiamo per id_anti_malware
			// e recuperiamo le info di interesse
			query = 	"SELECT tmp_table.id_anti_malware,tmp_table.nome,total_scans," +
						"MaliciousToClean,IF(totalMaliciousPre = 0, NULL, (MaliciousToClean/totalMaliciousPre)*100) as 'MTC_on_malicious_pre%', " +
						"MaliciousToMalicious,IF(totalMaliciousPre = 0, NULL,(MaliciousToMalicious/totalMaliciousPre)*100) as 'MTM_on_malicious_pre%'" +
						",CleanToMalicious,IF(totalCleanPre = 0, NULL, (CleanToMalicious/totalCleanPre)*100) as 'CTM_on_clean_pre%', " +
						"CleanToClean , IF(totalCleanPre = 0, NULL, (CleanToClean/totalCleanPre)*100) as 'CTC_on_clean_pre%' " +
						"FROM " +
						"( " +
							"SELECT post_temp.id_anti_malware,anti_malware.nome,count(*) total_scans, " +
							"SUM(scans_pre_transformations.scan_result_is_malicious = 'T' ) totalMaliciousPre, " +
							"SUM(scans_pre_transformations.scan_result_is_malicious = 'F' ) totalCleanPre, " +
							"SUM(post_temp.scan_result_is_malicious = 'T' ) totalMaliciousPost, " +
							"SUM(post_temp.scan_result_is_malicious = 'F' ) totalCleanPost, " +
							"SUM(post_temp.scan_result_is_malicious = 'F' " +
							"AND scans_pre_transformations.scan_result_is_malicious = 'T' ) MaliciousToClean, " +
							"SUM(post_temp.scan_result_is_malicious = 'T' " +
							"AND scans_pre_transformations.scan_result_is_malicious = 'T')  MaliciousToMalicious, " +
							"SUM(post_temp.scan_result_is_malicious = 'F' " +
							"AND scans_pre_transformations.scan_result_is_malicious = 'F')  CleanToClean, " +
							"SUM(post_temp.scan_result_is_malicious = 'T' " +
							"AND scans_pre_transformations.scan_result_is_malicious = 'F')  CleanToMalicious  " +
							"FROM post_temp,scans_pre_transformations,anti_malware " +
							"WHERE post_temp.id_malware = scans_pre_transformations.id_malware " +
							"AND post_temp.id_anti_malware = scans_pre_transformations.id_anti_malware " +
							"AND post_temp.id_anti_malware = anti_malware.id " +
							"GROUP BY post_temp.id_anti_malware,anti_malware.nome " +
					    " ) as tmp_table ORDER BY IF(totalMaliciousPre = 0, NULL, (MaliciousToClean/totalMaliciousPre)*100)  DESC;";    
	
			System.out.println(query);
	
			rs = stmt.executeQuery(query);
			
			// descrizione risultati query
			String descriptionTable = "Le righe sono ordinate per valori discendenti del rapporto MaliciousToClean/(MaliciousToClean + MaliciousToMalicious)<br>";
	
			HtmlReporterPre.printHtml(rs,descriptionTable,"ResultsComparisonAntimalware_wf_flows");
	}
	
	

	public static void showResultsComparisonAntimalware_bf( boolean disass_and_reass ,boolean repacking_signature,
	           boolean call_indirection,boolean identifier_renaming_package,
	           boolean identifier_renaming_classname,boolean code_reorder,
	           boolean data_encoding, boolean junk_nop,
	           boolean junk_nop_unc_jump, boolean junk_random_garbage) throws SQLException, IOException
	{	
		Connection dbCon = DriverManager.getConnection(DBConfiguration.DB_URL,DBConfiguration.USERNAME,DBConfiguration.PASSWORD);
		Statement stmt;
        ResultSet rs;
        
        // estrarre le scansioni antimalware - malware relative ad un certo set di trasformazioni:
        // fissati i valori dei campi disass_and_reass ,repacking_signature,
        // call_indirection,identifier_renaming_package,
        // identifier_renaming_classname,code_reorder,data_encoding,junk_nop,
        // junk_nop_unc_jump,junk_random_garbage
        // i campi id_malware e id_anti_malware sono chiave nella tab composta dalle righe selezionate
		String query = "CREATE TEMPORARY TABLE IF NOT EXISTS post_temp AS " +
				       "(" +
					       "SELECT id_malware,id_anti_malware,scan_result_is_malicious " +
					       "FROM scans_post_transformations " +
					       "WHERE " +
					       "disass_and_reass = " + disass_and_reass + " AND " +
	                  	   "repacking = " + repacking_signature + " AND " +
	                  	   "call_indirection = " + call_indirection + " AND " + 
	                  	   "changing_package = " + identifier_renaming_package + " AND " +
	                  	   "changing_classname = " + identifier_renaming_classname + " AND " +
	                  	   "code_reorder = " + code_reorder + " AND " +
	                  	   "data_encoding = " + data_encoding + " AND " +
	                  	   "junk_nop = " + junk_nop + " AND " +
	                  	   "junk_nop_unc_jump = " + junk_nop_unc_jump + " AND " +
	                  	   "junk_random_garbage = " + junk_random_garbage + 
                  	   " ); ";
		
		stmt = dbCon.createStatement();

		System.out.println(query);
		stmt.execute(query);
		
		// dal prodotto cartesiamo post_temp,scans_pre_transformations
		// selezionamo le coppie scansioni pre e post che fanno riferimento 
		// allo stesso malware ed antimalware 
		// raggruppiamo per id_anti_malware
		// e recuperiamo le info di interesse
		query = 	"SELECT tmp_table.id_anti_malware,tmp_table.nome,totalScans,totalMaliciousPre,(totalMaliciousPre/totalScans)*100 as 'malicious_on_total_pre_%',totalCleanPre, (totalCleanPre/totalScans)*100 as 'clean_on_total_pre_%'," +
					"totalMaliciousPost,(totalMaliciousPost/totalScans)*100 as 'malicious_on_total_post_%',totalCleanPost, (totalCleanPost/totalScans)*100 as 'clean_on_total_post_%' " +
					"FROM " +
					"( " +
						"SELECT post_temp.id_anti_malware,anti_malware.nome,count(*) totalScans," +
						"SUM(scans_pre_transformations.scan_result_is_malicious = 'T' ) totalMaliciousPre, " +
						"SUM(scans_pre_transformations.scan_result_is_malicious = 'F' ) totalCleanPre, " +
						"SUM(post_temp.scan_result_is_malicious = 'T' ) totalMaliciousPost, " +
						"SUM(post_temp.scan_result_is_malicious = 'F' ) totalCleanPost " +
						"FROM post_temp,scans_pre_transformations,anti_malware " +
						"WHERE post_temp.id_malware = scans_pre_transformations.id_malware " +
						"AND post_temp.id_anti_malware = scans_pre_transformations.id_anti_malware " +
						"AND post_temp.id_anti_malware = anti_malware.id " +
						"GROUP BY post_temp.id_anti_malware,anti_malware.nome " +
				    " ) as tmp_table order by (totalMaliciousPost/totalScans)  DESC;";    

		System.out.println(query);

		rs = stmt.executeQuery(query);
		
		// descrizione risultati query
		String descriptionTable = "Le righe sono ordinate per valori discendenti del rapporto totalMaliciousPost/totalScans<br>";

		HtmlReporterPre.printHtml(rs,descriptionTable,"ResultsComparisonAntimalware_bf");
	}
	
	
	public static void showResultsComparisonAntimalware_bf_flows( boolean disass_and_reass ,boolean repacking_signature,
	           boolean call_indirection,boolean identifier_renaming_package,
	           boolean identifier_renaming_classname,boolean code_reorder,
	           boolean data_encoding, boolean junk_nop,
	           boolean junk_nop_unc_jump, boolean junk_random_garbage) throws SQLException, IOException
	{	
		Connection dbCon = DriverManager.getConnection(DBConfiguration.DB_URL,DBConfiguration.USERNAME,DBConfiguration.PASSWORD);
		Statement stmt;
		ResultSet rs;
     
     // estrarre le scansioni antimalware - malware relative ad un certo set di trasformazioni:
     // fissati i valori dei campi disass_and_reass ,repacking_signature,
     // call_indirection,identifier_renaming_package,
     // identifier_renaming_classname,code_reorder,data_encoding,junk_nop,
     // junk_nop_unc_jump,junk_random_garbage
     // i campi id_malware e id_anti_malware sono chiave nella tab composta dalle righe selezionate
		String query = "CREATE TEMPORARY TABLE IF NOT EXISTS post_temp AS " +
				       "(" +
					       "SELECT id_malware,id_anti_malware,scan_result_is_malicious " +
					       "FROM scans_post_transformations " +
					       "WHERE " +
					       "disass_and_reass = " + disass_and_reass + " AND " +
	                  	   "repacking = " + repacking_signature + " AND " +
	                  	   "call_indirection = " + call_indirection + " AND " + 
	                  	   "changing_package = " + identifier_renaming_package + " AND " +
	                  	   "changing_classname = " + identifier_renaming_classname + " AND " +
	                  	   "code_reorder = " + code_reorder + " AND " +
	                  	   "data_encoding = " + data_encoding + " AND " +
	                  	   "junk_nop = " + junk_nop + " AND " +
	                  	   "junk_nop_unc_jump = " + junk_nop_unc_jump + " AND " +
	                  	   "junk_random_garbage = " + junk_random_garbage + 
               	   " ); ";
		
		stmt = dbCon.createStatement();

		System.out.println(query);
		stmt.execute(query);
		
		// dal prodotto cartesiamo post_temp,scans_pre_transformations
		// selezionamo le coppie scansioni pre e post che fanno riferimento 
		// allo stesso malware ed antimalware 
		// raggruppiamo per id_anti_malware
		// e recuperiamo le info di interesse
		query = 	"SELECT tmp_table.id_anti_malware,tmp_table.nome,total_scans," +
					"MaliciousToClean,IF(totalMaliciousPre = 0, NULL, (MaliciousToClean/totalMaliciousPre)*100) as 'MTC_on_malicious_pre%', " +
					"MaliciousToMalicious,IF(totalMaliciousPre = 0, NULL,(MaliciousToMalicious/totalMaliciousPre)*100) as 'MTM_on_malicious_pre%'" +
					",CleanToMalicious,IF(totalCleanPre = 0, NULL, (CleanToMalicious/totalCleanPre)*100) as 'CTM_on_clean_pre%', " +
					"CleanToClean , IF(totalCleanPre = 0, NULL, (CleanToClean/totalCleanPre)*100) as 'CTC_on_clean_pre%' " +
					"FROM " +
					"( " +
						"SELECT post_temp.id_anti_malware,anti_malware.nome,count(*) total_scans, " +
						"SUM(scans_pre_transformations.scan_result_is_malicious = 'T' ) totalMaliciousPre, " +
						"SUM(scans_pre_transformations.scan_result_is_malicious = 'F' ) totalCleanPre, " +
						"SUM(post_temp.scan_result_is_malicious = 'T' ) totalMaliciousPost, " +
						"SUM(post_temp.scan_result_is_malicious = 'F' ) totalCleanPost, " +
						"SUM(post_temp.scan_result_is_malicious = 'F' " +
						"AND scans_pre_transformations.scan_result_is_malicious = 'T' ) MaliciousToClean, " +
						"SUM(post_temp.scan_result_is_malicious = 'T' " +
						"AND scans_pre_transformations.scan_result_is_malicious = 'T')  MaliciousToMalicious, " +
						"SUM(post_temp.scan_result_is_malicious = 'F' " +
						"AND scans_pre_transformations.scan_result_is_malicious = 'F')  CleanToClean, " +
						"SUM(post_temp.scan_result_is_malicious = 'T' " +
						"AND scans_pre_transformations.scan_result_is_malicious = 'F')  CleanToMalicious  " +
						"FROM post_temp,scans_pre_transformations,anti_malware " +
						"WHERE post_temp.id_malware = scans_pre_transformations.id_malware " +
						"AND post_temp.id_anti_malware = scans_pre_transformations.id_anti_malware " +
						"AND post_temp.id_anti_malware = anti_malware.id " +
						"GROUP BY post_temp.id_anti_malware,anti_malware.nome " +
				    " ) as tmp_table ORDER BY IF(totalMaliciousPre = 0, NULL, (MaliciousToMalicious/totalMaliciousPre)*100)  DESC;";    

		System.out.println(query);

		rs = stmt.executeQuery(query);
		
		// descrizione risultati query
		String descriptionTable = "Le righe sono ordinate per valori discendenti del rapporto MaliciousToMalicious/(MaliciousToClean + MaliciousToMalicious)<br>";

		HtmlReporterPre.printHtml(rs,descriptionTable,"ResultsComparisonAntimalware_bf_flows");
	}
	
	
	public static void showResultsComparisonFamily(boolean disass_and_reass ,boolean repacking_signature,
			  boolean call_indirection,boolean identifier_renaming_package,
			  boolean identifier_renaming_classname,boolean code_reorder,
			  boolean data_encoding, boolean junk_nop,
			  boolean junk_nop_unc_jump, boolean junk_random_garbage) throws SQLException, IOException
	{
		Connection dbCon = DriverManager.getConnection(DBConfiguration.DB_URL,DBConfiguration.USERNAME,DBConfiguration.PASSWORD);
		Statement stmt;
        ResultSet rs;
        
        
        // estrarre da scans_post_transformations le scansioni antimalware - malware relative
        // ad un certo set di trasformazioni:
        // fissati i valori dei campi disass_and_reass ,repacking,
        // call_indirection,identifier_renaming_package,
        // identifier_renaming_classname,code_reorder,data_encoding,junk_nop,
        // junk_nop_unc_jump,junk_random_garbage
        // i campi id_malware e id_anti_malware sono chiave nella tab composta dai campi:
        // id_malware,id_anti_malware,scan_result_is_malicious
		String query = "CREATE TEMPORARY TABLE IF NOT EXISTS post_temp AS " +
				       "(" +
					       "SELECT id_malware,id_anti_malware,scan_result_is_malicious " +
					       "FROM scans_post_transformations " +
					       "WHERE " +
					       "disass_and_reass = " + disass_and_reass + " AND " +
	                  	   "repacking = " + repacking_signature + " AND " +
	                  	   "call_indirection = " + call_indirection + " AND " + 
	                  	   "changing_package = " + identifier_renaming_package + " AND " +
	                  	   "changing_classname = " + identifier_renaming_classname + " AND " +
	                  	   "code_reorder = " + code_reorder + " AND " +
	                  	   "data_encoding = " + data_encoding + " AND " +
	                  	   "junk_nop = " + junk_nop + " AND " +
	                  	   "junk_nop_unc_jump = " + junk_nop_unc_jump + " AND " +
	                  	   "junk_random_garbage = " + junk_random_garbage + 
                  	   " ); ";
		
		stmt = dbCon.createStatement();
		System.out.println(query);
		stmt.execute(query);

		// dal prodotto cartesiamo post_temp,scans_pre_transformations
		// selezionamo le coppie scansioni pre e post che fanno riferimento 
		// allo stesso malware ed antimalware 
		// raggruppiamo per id_malware
		// e  totalMaliciousPre-post totalMCleaPre-post
		query = "CREATE TEMPORARY TABLE IF NOT EXISTS temp AS " +
			    "( " +
				    "SELECT post_temp.id_malware,count(*) totalScans, " +
					"SUM(scans_pre_transformations.scan_result_is_malicious = 'T' ) totalMaliciousPre, " +
					"SUM(scans_pre_transformations.scan_result_is_malicious = 'F' ) totalCleanPre, " +
					"SUM(post_temp.scan_result_is_malicious = 'T' ) totalMaliciousPost, " +
					"SUM(post_temp.scan_result_is_malicious = 'F' ) totalCleanPost " +
					"FROM post_temp,scans_pre_transformations " +
					"WHERE post_temp.id_malware = scans_pre_transformations.id_malware " +
					"AND post_temp.id_anti_malware = scans_pre_transformations.id_anti_malware " +
					"GROUP BY post_temp.id_malware " +
			    ");";
		
		System.out.println(query);
		stmt.execute(query);
		
		// costruiamo tabella che leghi ogni riga di temp alla famiglia del malware
		// raggruppiamo per malware.id_family,malware_family.family_name
		// e contiamo per ciascuna famiglia quanti malware sono di successo (convincono la maggioranza dei AM cui
		// sono sottoposti di non essere malicious) calcoliamo tale info sia per le scansione pre che per quelle post
		// trasformazioni
		query = "Select res.id_family,res.family_name, totalMalwares, passedMalwaresPre, passedMalwaresPost, " +
				"(passedMalwaresPost/totalMalwares)*100 as 'passed_post_%'" +
				"FROM " +
			    "( " +
				    "SELECT malware.id_family,malware_family.family_name,count(*) totalMalwares, " +
				    "SUM( totalCleanPre  > totalMaliciousPre ) as passedMalwaresPre, " +
				    "SUM( totalCleanPost > totalMaliciousPost ) as passedMalwaresPost " +
					"FROM temp,malware,malware_family " +
					"WHERE " +
					"temp.id_malware = malware.id " +
					"AND malware.id_family = malware_family.id " +
					"GROUP BY malware.id_family,malware_family.family_name " +
			    ") as res order by passedMalwaresPost/totalMalwares DESC;";
		
		System.out.println(query);
		stmt.executeQuery(query);

		rs = stmt.executeQuery(query);
		
		String descr = "Le righe sono ordinate per valori discendenti del rapporto passedMalwaresPost/totalMalware<br>" +
					   "*passedMalwares = numero di malware di una determinata famiglia che vengono reputati safe dalla maggioranza degli antimalware a cui sono stati sottomessi<br>";
		
		HtmlReporterPre.printHtml(rs,descr,"ResultsComparisonFamily_bf");
	}
}
