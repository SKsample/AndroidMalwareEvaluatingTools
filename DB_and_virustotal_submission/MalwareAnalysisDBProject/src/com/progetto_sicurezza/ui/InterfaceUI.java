package com.progetto_sicurezza.ui;

import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.sql.SQLException;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;

public class InterfaceUI
{
	private static int rowPanelComponents = 18;
	private static int columnFrameComponents = 3;
	
	private static String show_results_pre_command = "show_results_pre";
	private static String show_results_am_pre_command = "show_results_am_pre";
	private static String show_results_family_pre_command = "show_results_family_pre";
	
	private static String show_results_comp_command = "show_results_comp";
	private static String show_results_comp_command_flow = "show_results_comp_flow";
	private static String show_results_family_comp_command = "show_results_family_comp";
	private static String show_results_am_comp_command_wf = "show_results_am_comp_wf";
	private static String show_results_am_comp_command_bf = "show_results_am_comp_bf";
	private static String show_results_am_comp_command_wf_flows = "show_results_am_comp_wf_flows";
	private static String show_results_am_comp_command_bf_flows = "show_results_am_comp_bf_flows";
	
	private static String searchMalwareById_command = "searchMalwareById";
	private static String searchMalwareByStrId_command = "searchMalwareByStrId";
	private static String searchAntiMalwareById_command = "searchAntiMalwareById";
	private static String searchAntiMalwareByName_command = "searchAntiMalwareByName";
	
	public static void main (String args[])
	{
		new InterfaceUI();
	}

	public InterfaceUI()
	{ 
		   //////////////////////////////////////////////////////////////////////////// PANEL_PRE
		   JPanel panel_pre = new JPanel();
		   panel_pre.setLayout(new GridLayout(rowPanelComponents,1));
		   panel_pre.setBorder(BorderFactory.createTitledBorder("Pre-Transf-Analysis"));
		   
		   JButton show_results_pre = new JButton();
		   show_results_pre.setText("Show Malware Results (best first)");
		   show_results_pre.setActionCommand(show_results_pre_command);
		   
		   JButton show_family_pre = new JButton();
		   show_family_pre.setText("Show Malware-Family Results (best first)");
		   show_family_pre.setActionCommand(show_results_family_pre_command);
		   
		   JButton show_best_am_pre = new JButton();
		   show_best_am_pre.setText("Show Anti-Malware Results (best-first)");
		   show_best_am_pre.setActionCommand(show_results_am_pre_command);

		   panel_pre.add(show_results_pre);
		   panel_pre.add(show_best_am_pre);
		   panel_pre.add(show_family_pre);
		   
		   /////////////////////////////////////////////////////////////////////////// PANEL_POST
		   
		   JPanel panel_comp = new JPanel();
		   panel_comp.setLayout(new GridLayout(rowPanelComponents ,1));
		   panel_comp.setBorder(BorderFactory.createTitledBorder("Pre-Post-Transf-Comparison"));
		   
		   JButton show_results_comp = new JButton();
		   show_results_comp.setActionCommand(show_results_comp_command);
		   show_results_comp.setText("Show Transformations Results (best first)");
		   
		   JButton show_results_comp_flow = new JButton();
		   show_results_comp_flow.setActionCommand(show_results_comp_command_flow);
		   show_results_comp_flow.setText("Show Transformations Results flows (best first)");
		   
		   JButton show_results_am_comp_wf = new JButton();
		   show_results_am_comp_wf.setActionCommand(show_results_am_comp_command_wf);
		   show_results_am_comp_wf.setText("Show Anti-Malware Results (worst first)");
		   
		   JButton show_results_am_comp_wf_flows = new JButton();
		   show_results_am_comp_wf_flows.setActionCommand(show_results_am_comp_command_wf_flows);
		   show_results_am_comp_wf_flows.setText("Show Anti-Malware Results flows (worst first)");
		   
		   JButton show_results_am_comp_bf = new JButton();
		   show_results_am_comp_bf.setActionCommand(show_results_am_comp_command_bf);
		   show_results_am_comp_bf.setText("Show Anti-Malware Results (best first)");
		   
		   JButton show_results_am_comp_bf_flows = new JButton();
		   show_results_am_comp_bf_flows.setActionCommand(show_results_am_comp_command_bf_flows);
		   show_results_am_comp_bf_flows.setText("Show Anti-Malware Results flows (best first)");
		   
		   JButton show_results_family_comp = new JButton();
		   show_results_family_comp.setActionCommand(show_results_family_comp_command);
		   show_results_family_comp.setText("Show Malware-Family Results (best first)");
		   
		   JTextArea jta = new JTextArea();
		   jta.append("Please select the transformation combination \n" +
		   		      "you want to analyze the results.");
		   jta.setOpaque(false);
		   jta.setEditable(false);
 
		   final JCheckBox disass_and_reass = new JCheckBox("disass_and_reass");
		   final JCheckBox repacking_signature = new JCheckBox("repacking_signature");
		   final JCheckBox call_indirection = new JCheckBox("call_indirection");
		   final JCheckBox identifier_renaming_package = new JCheckBox("identifier_renaming_package");
		   final JCheckBox identifier_renaming_classname = new JCheckBox("identifier_renaming_classname");
		   final JCheckBox code_reorder = new JCheckBox("code_reorder");
		   final JCheckBox data_encoding = new JCheckBox("data_encoding");
		   final JCheckBox junk_nop = new JCheckBox("junk_nop");
		   final JCheckBox junk_nop_unc_jump = new JCheckBox("junk_nop_unc_jump");
		   final JCheckBox junk_random_garbage = new JCheckBox("junk_random_garbage");
		   
		   panel_comp.add(show_results_comp);
		   panel_comp.add(show_results_comp_flow);
		   panel_comp.add(show_results_am_comp_bf);
		   panel_comp.add(show_results_am_comp_wf);
		   panel_comp.add(show_results_am_comp_bf_flows);
		   panel_comp.add(show_results_am_comp_wf_flows);
		   panel_comp.add(show_results_family_comp);
		   panel_comp.add(jta);
	   
		   panel_comp.add(disass_and_reass);
		   panel_comp.add(repacking_signature);
		   panel_comp.add(call_indirection);  
		   panel_comp.add(identifier_renaming_package);
		   panel_comp.add(identifier_renaming_classname);
		   panel_comp.add(code_reorder);
		   panel_comp.add(data_encoding );
		   panel_comp.add(junk_nop);
		   panel_comp.add(junk_nop_unc_jump);
		   panel_comp.add(junk_random_garbage);
		   
		   //////////////////////////////////////////////////////////////////////////// PANEL_SEARCH
		   JPanel panel_search = new JPanel();
		   panel_search.setLayout(new GridLayout(rowPanelComponents,1));
		   panel_search.setBorder(BorderFactory.createTitledBorder("Search-by"));
		   
		   final JTextField userText = new JTextField();

		   JButton searchMalwareById = new JButton();
		   searchMalwareById.setActionCommand(searchMalwareById_command);
		   searchMalwareById.setText("Search Malware By Id");
		   
		   JButton searchMalwareByStrId = new JButton();
		   searchMalwareByStrId.setActionCommand(searchMalwareByStrId_command);
		   searchMalwareByStrId.setText("Search Malware By String Id");
		   
		   JButton searchAntiMalwareById = new JButton();
		   searchAntiMalwareById.setActionCommand(searchAntiMalwareById_command);
		   searchAntiMalwareById.setText("Search AntiMalware By Id");
		   
		   JButton searchAntiMalwareByName = new JButton();
		   searchAntiMalwareByName.setActionCommand(searchAntiMalwareByName_command);
		   searchAntiMalwareByName.setText("Search AntiMalware By Name");
		   
		   panel_search.add(userText);
		   panel_search.add(searchMalwareById);
		   panel_search.add(searchMalwareByStrId);
		   panel_search.add(searchAntiMalwareById);
		   panel_search.add(searchAntiMalwareByName);

		   JFrame frame = new JFrame();
		   frame.setTitle("Choose query on DB");
		   frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		   
		   ///////////////////////////////////////////////////////////////////////////////////// FRAME
		   GridLayout gl = new GridLayout(1,columnFrameComponents);
		   frame.setLayout(gl);

		   frame.add(panel_pre);
		   frame.add(panel_comp);	   
		   frame.add(panel_search);
		   
		   frame.setResizable(false);
		   frame.setVisible(true);
		   frame.setVisible(true);
		   frame.pack();
		   
		   ///////////////////////////////////////////////////////////////////////////////// ACTION_LISTENER
		   
			   class MyActionListener implements ActionListener
			   {
	
				@Override
				public void actionPerformed(ActionEvent event) 
				{
					try
					{
						if(event.getActionCommand().equalsIgnoreCase(show_results_am_pre_command))
							HtmlReporterPre.showResultsAmPre();
						else if(event.getActionCommand().equalsIgnoreCase(show_results_family_pre_command))
							HtmlReporterPre.showResultsFamilyPre();	
						else if(event.getActionCommand().equalsIgnoreCase(show_results_pre_command))
							HtmlReporterPre.showResultsMalwarePre();
						else if(event.getActionCommand().equalsIgnoreCase(show_results_comp_command))
							HtmlReporterComparison.showResultsComparisonMalware_bf(disass_and_reass.isSelected() ,repacking_signature.isSelected(),
				                                    call_indirection.isSelected(), identifier_renaming_package.isSelected(),
				                                    identifier_renaming_classname.isSelected(), code_reorder.isSelected(),
				                                    data_encoding.isSelected(),junk_nop.isSelected(),
				                                    junk_nop_unc_jump.isSelected(),junk_random_garbage.isSelected());
						else if(event.getActionCommand().equalsIgnoreCase(show_results_comp_command_flow))
							HtmlReporterComparison.showResultsComparisonMalware_flows_bf(disass_and_reass.isSelected() ,repacking_signature.isSelected(),
				                                    call_indirection.isSelected(), identifier_renaming_package.isSelected(),
				                                    identifier_renaming_classname.isSelected(), code_reorder.isSelected(),
				                                    data_encoding.isSelected(),junk_nop.isSelected(),
				                                    junk_nop_unc_jump.isSelected(),junk_random_garbage.isSelected());
						else if(event.getActionCommand().equalsIgnoreCase(show_results_family_comp_command))
						{
						 HtmlReporterComparison.showResultsComparisonFamily(disass_and_reass.isSelected() ,repacking_signature.isSelected(),
                                 call_indirection.isSelected(), identifier_renaming_package.isSelected(),
                                 identifier_renaming_classname.isSelected(), code_reorder.isSelected(),
                                 data_encoding.isSelected(),junk_nop.isSelected(),
                                 junk_nop_unc_jump.isSelected(),junk_random_garbage.isSelected());
						}
						else if(event.getActionCommand().equalsIgnoreCase(show_results_am_comp_command_wf))
						{
						 HtmlReporterComparison.showResultsComparisonAntimalware_wf(disass_and_reass.isSelected() ,repacking_signature.isSelected(),
                                 call_indirection.isSelected(), identifier_renaming_package.isSelected(),
                                 identifier_renaming_classname.isSelected(), code_reorder.isSelected(),
                                 data_encoding.isSelected(),junk_nop.isSelected(),
                                 junk_nop_unc_jump.isSelected(),junk_random_garbage.isSelected());
						}
						else if(event.getActionCommand().equalsIgnoreCase(show_results_am_comp_command_bf))
						{
						 HtmlReporterComparison.showResultsComparisonAntimalware_bf(disass_and_reass.isSelected() ,repacking_signature.isSelected(),
                                 call_indirection.isSelected(), identifier_renaming_package.isSelected(),
                                 identifier_renaming_classname.isSelected(), code_reorder.isSelected(),
                                 data_encoding.isSelected(),junk_nop.isSelected(),
                                 junk_nop_unc_jump.isSelected(),junk_random_garbage.isSelected());
						}
						else if(event.getActionCommand().equalsIgnoreCase(show_results_am_comp_command_wf_flows))
						{
						 HtmlReporterComparison.showResultsComparisonAntimalware_wf_flows(disass_and_reass.isSelected() ,repacking_signature.isSelected(),
                                 call_indirection.isSelected(), identifier_renaming_package.isSelected(),
                                 identifier_renaming_classname.isSelected(), code_reorder.isSelected(),
                                 data_encoding.isSelected(),junk_nop.isSelected(),
                                 junk_nop_unc_jump.isSelected(),junk_random_garbage.isSelected());
						}
						else if(event.getActionCommand().equalsIgnoreCase(show_results_am_comp_command_bf_flows))
						{
						 HtmlReporterComparison.showResultsComparisonAntimalware_bf_flows(disass_and_reass.isSelected() ,repacking_signature.isSelected(),
                                 call_indirection.isSelected(), identifier_renaming_package.isSelected(),
                                 identifier_renaming_classname.isSelected(), code_reorder.isSelected(),
                                 data_encoding.isSelected(),junk_nop.isSelected(),
                                 junk_nop_unc_jump.isSelected(),junk_random_garbage.isSelected());
						}
						else if(event.getActionCommand().equalsIgnoreCase(searchMalwareById_command))
						{		
						 String input = userText.getText();
						 if(isPosInteger(input) == false)
						  JOptionPane.showMessageDialog(null, "Insert a positive index.");
						 else
						  HtmlSearcher.searchMalwareById(Integer.parseInt(input));
						}
						else if(event.getActionCommand().equalsIgnoreCase(searchMalwareByStrId_command))
						{
						 String input = userText.getText();	
						 HtmlSearcher.searchMalwareByStrId(input);
						} 
						else if(event.getActionCommand().equalsIgnoreCase(searchAntiMalwareById_command))
						{
						 String input = userText.getText();
						 if(isPosInteger(input) == false)
						  JOptionPane.showMessageDialog(null, "Insert a positive index.");
						 else
						 HtmlSearcher.searchAntimalwareById(Integer.parseInt(input));
						}	
						else if(event.getActionCommand().equalsIgnoreCase(searchAntiMalwareByName_command))
						{
						 String input = userText.getText();	
						 HtmlSearcher.searchAntimalwareByName(input);
						}
						else // never reached
						;
					}
					catch (SQLException e)
					{
						e.printStackTrace();
					}
					catch (IOException e)
					{
						e.printStackTrace();
					}
				 }
			   }
		   
		   ////////////////////////////////////////////////////////////// ACTION BINDING	   
			   
		   MyActionListener mal = new MyActionListener();
		   
		   show_results_comp.addActionListener(mal);
		   show_results_comp_flow.addActionListener(mal);
		   show_results_pre.addActionListener(mal); 
		   show_best_am_pre.addActionListener(mal);
		   show_family_pre.addActionListener(mal);
		   show_results_family_comp.addActionListener(mal);
		   show_results_am_comp_wf.addActionListener(mal);
		   show_results_am_comp_bf.addActionListener(mal);
		   show_results_am_comp_wf_flows.addActionListener(mal);
		   show_results_am_comp_bf_flows.addActionListener(mal);
		   
		   searchMalwareById.addActionListener(mal);
		   searchMalwareByStrId.addActionListener(mal);
		   searchAntiMalwareById.addActionListener(mal);
		   searchAntiMalwareByName.addActionListener(mal);
	}

	private static boolean isPosInteger(String str)
	{ 
		int d;
		
		  try  
		  {
			d = Integer.parseInt(str);  
		  }  
		  catch(NumberFormatException nfe)  
		  {  
		    return false;  
		  } 

		  if(d > 0)return true;
		  return false;
	}
}
