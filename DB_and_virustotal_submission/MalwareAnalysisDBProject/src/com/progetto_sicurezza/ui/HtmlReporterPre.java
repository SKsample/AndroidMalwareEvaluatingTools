package com.progetto_sicurezza.ui;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;

import com.progetto_sicurezza.dbconfig.DBConfiguration;

public class HtmlReporterPre
{
	final static String CHAR_ENCODING = "UTF-8";
	
	public static void showResultsMalwarePre() throws SQLException, IOException
	{
		Connection dbCon = DriverManager.getConnection(DBConfiguration.DB_URL,DBConfiguration.USERNAME,DBConfiguration.PASSWORD);
		Statement stmt;
        ResultSet rs;
        
        //estrarre le prestazioni dei malware nel nascondersi dalla analisi degli antimalware:
        // associare ongi riga di pre alla riga malware cui si riferisce
        // raggruppare sull'id dei malware (e sul malware_str_id come richiesto dalla clausola gropu by)
        // estrarre le info di interesse
		String query = "SELECT malware_str_id,id_malware,totalScans, Malicious, Clean , (Clean/totalScans)*100 as 'clean_on_totalScans_%'" +
					   "FROM " +
					   "( " +
						   "SELECT malware.malware_str_id,scans_pre_transformations.id_malware,count(*) as totalScans, " +
	 		               "SUM(scan_result_is_malicious = 'T') Malicious, " +
	 		               "SUM(scan_result_is_malicious = 'F')  Clean " +
	                       "FROM scans_pre_transformations,malware " +
	                       "WHERE scans_pre_transformations.id_malware = malware.id " +
	                       "GROUP BY id_malware,malware.malware_str_id " +
                       ") as tmp_table ORDER BY Clean/totalScans DESC;" ;

		System.out.println(query);

		stmt = dbCon.createStatement();
		rs = stmt.executeQuery(query);

		// descrizione risultati query
		String descriptionTable = "<b>totalScanns:</b> numero di anti-malware da cui il malware è stato scansionato<br>" +
								  "<b>Malicious:</b>numero di anti-malware che hanno rilevato il malware MALICIOUS<br>" +
								  "<b>Clean:</b> numero di anti-malware che hanno rilevato il malware come NON MALICIOUS<br>" + 
								  "<b> Le righe sono ordinate per valori discendenti del rapporto Clean/totalScans</b><br>";
							

		printHtml(rs,descriptionTable,"ResultsMalwarePre");			
	}
	
	public static void showResultsAmPre() throws SQLException, IOException
	{	
		Connection dbCon = DriverManager.getConnection(DBConfiguration.DB_URL,DBConfiguration.USERNAME,DBConfiguration.PASSWORD);
		Statement stmt;
        ResultSet rs;
        
        //estrarre le prestazioni degli antimalware nello scovare comportamento malicious
        // nei malware analizzati:
        // associare ongi riga di pre alla riga antimalware cui si riferisce
        // raggruppare sull'id degli antimalware (e sul nome dell'antimalware come richiesto dalla clausola gropu by)
        // estrarre le info di interesse
        String query = "SELECT id_anti_malware, " +
		   "tmp_table.nome, totalScans, Malicious, Clean, (Malicious/totalScans)*100 as 'Malicious_on_totalScans_%' " +
		   "FROM " +
		   "( " +
			   "SELECT id_anti_malware,anti_malware.nome, count(*) totalScans, " +
               "SUM(scan_result_is_malicious = 'T') Malicious, " +
               "SUM(scan_result_is_malicious = 'F')  Clean " +
               "FROM scans_pre_transformations,anti_malware " +
               "WHERE id_anti_malware = anti_malware.id " +
               "GROUP BY id_anti_malware,anti_malware.nome " +
        ") as tmp_table ORDER BY Malicious/totalScans DESC; ";

		System.out.println(query);

		stmt = dbCon.createStatement();
		rs = stmt.executeQuery(query);

		// descrizione risultati query
		String descriptionTable = "";
								  

		printHtml(rs,descriptionTable,"ResultsAmPre");	
	}


	public static void showResultsFamilyPre() throws SQLException, IOException
	{
		Connection dbCon = DriverManager.getConnection(DBConfiguration.DB_URL,DBConfiguration.USERNAME,DBConfiguration.PASSWORD);
		Statement stmt;
        ResultSet rs;

		// raggruppiamo per id_malware
		// e contiamo totalMaliciousPre/post totalMCleaPre/post
		String query = "CREATE TEMPORARY TABLE IF NOT EXISTS temp AS " +
					    "( " +
						    "SELECT id_malware,count(*) totalScans, " +
							"SUM(scans_pre_transformations.scan_result_is_malicious = 'T' ) totalMaliciousPre, " +
							"SUM(scans_pre_transformations.scan_result_is_malicious = 'F' ) totalCleanPre " +
							"FROM scans_pre_transformations " +
							"GROUP BY id_malware " +
					    ");";
		
		stmt = dbCon.createStatement();
		System.out.println(query);
		stmt.execute(query);
		
		// costruiamo tabella che leghi ogni riga di temp alla famiglia del malware
		// raggruppiamo per malware.id_family,malware_family.family_name
		// e contiamo per ciascuna famiglia quanti malware sono di successo (convincono la maggioranza dei AM cui
		// sono sottoposti di non essere malicious) calcoliamo tale info sia per le scansione pre che per quelle post
		// trasformazioni
		query = "Select res.id_family,res.family_name, totalMalwares, passedMalwaresPre, " +
				"(passedMalwaresPre/totalMalwares)*100 as 'passed_pre_%' " +
				"FROM " +
			    "( " +
				    "SELECT malware.id_family,malware_family.family_name,count(*) totalMalwares, " +
				    "SUM( totalCleanPre  > totalMaliciousPre ) as passedMalwaresPre " +
					"FROM temp,malware,malware_family " +
					"WHERE " +
					"temp.id_malware = malware.id " +
					"AND malware.id_family = malware_family.id " +
					"GROUP BY malware.id_family,malware_family.family_name " +
			    ") as res order by passedMalwaresPre/totalMalwares DESC;";
		
		System.out.println(query);
		stmt.executeQuery(query);

		rs = stmt.executeQuery(query);
		
		printHtml(rs,"","ResultsFamilyPre");
	}

	/*
	 * stampa risultati query e descrizione
	 */
	static void printHtml(ResultSet rs,String description,String fileName) throws SQLException, IOException
	{
		StringBuffer sb = new StringBuffer();
		ResultSetMetaData rsmd = rs.getMetaData();
		
		// print description of table
		String cssStyle = "<style> table, td, th { " +
                          "border: 1px solid green;} " +
                          "th { background-color: green; " +
                          "color: white; }" +
                          "</style> ";
		
		sb.append("<html>");
		sb.append("<head>");
		sb.append(cssStyle);
		sb.append("<meta charset=\"UTF-8\">");
	    sb.append("</head>");
		
		sb.append("<body>");
		
		sb.append("<table>");
		sb.append("<tr>"); 
		
		sb.append("<h3>Description</h3>");
		sb.append(description);
		sb.append("<br>");
		
		for(int i = 1; i <= rsmd.getColumnCount();i++)
			sb.append("<th>" + rsmd.getColumnName(i) + "</th>");	
		
		while(rs.next())
		{
			sb.append("<tr>");
			for(int i = 1; i <= rsmd.getColumnCount();i++)
				sb.append("<td>" + rs.getString(i) + "</td>");
		           
		     sb.append("<tr>");
		}

		sb.append("</table>");
		sb.append("</body>");
		sb.append("</html>");
		
		//rewrite file
		FileOutputStream fos = new FileOutputStream(fileName + ".html");
		OutputStreamWriter out = new OutputStreamWriter(fos, CHAR_ENCODING);
		out.append(sb.toString());
		out.close();
	}
}
