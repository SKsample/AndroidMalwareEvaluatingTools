package com.progetto_sicurezza.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import com.progetto_sicurezza.dbconfig.DBConfiguration;
import com.progetto_sicurezza.model.ScanPreTrans;

public class ScanPreTransDao
{
	/*
	 * scanPre: tutti i campi di scanPre possono essere null tranne:
	 * idAntiMalware,idMalware
	 * scanResultIsMalicious in set {"T","F"}
	 */
	public int insert(ScanPreTrans scanPre) throws SQLException
	{
		// controlli:
		// riferimento not null
		// vincolo not null e di insieme valori
		if(scanPre == null || scanPre.getIdAntimalware() == null || scanPre.getIdAntimalware() == null 
			|| !isValidScanResult(scanPre.getScanResultIsMalicious()) ) throw new IllegalArgumentException();

		Connection dbCon = DriverManager.getConnection(DBConfiguration.DB_URL,DBConfiguration.USERNAME,DBConfiguration.PASSWORD);
		PreparedStatement stmt;
		
        String insert = "INSERT INTO scans_pre_transformations (id_malware,id_anti_malware,scan_result_is_malicious,id_update_signature) "+
                        "VALUES (" + scanPre.getIdMalware() + "," + 
                          			 scanPre.getIdAntimalware() +",?,?);";
        
        System.out.println(insert);
 
        stmt = dbCon.prepareStatement(insert,Statement.RETURN_GENERATED_KEYS);
        stmt.setString(1, scanPre.getScanResultIsMalicious());
        stmt.setString(2, scanPre.getUpdateSignaturesId());
	    stmt.executeUpdate();
	    
	    ResultSet rs = stmt.getGeneratedKeys();
        if (rs.next() )
        {	
        	int toRet = rs.getInt(1);
        	dbCon.close();
            return toRet;
        }

        // never reached
        dbCon.close();
		return -1;
	}
	
	public ScanPreTrans getScanById(int id) throws SQLException
	{
		if(id <= 0) throw new IllegalArgumentException();

		Connection dbCon = DriverManager.getConnection(DBConfiguration.DB_URL,DBConfiguration.USERNAME,DBConfiguration.PASSWORD);
		Statement stmt;
        ResultSet rs;
        
		String query = "SELECT  * " +
				       "FROM scans_pre_transformations "  +
					   "WHERE  id = " + id;
		
		stmt = dbCon.createStatement();
		rs = stmt.executeQuery(query);
		
		if(rs.next())
		{	
		 ScanPreTrans scan = new ScanPreTrans();
		 scan.setId(rs.getInt(1));
		 scan.setIdMalware(rs.getInt(2));
		 scan.setIdAntimalware(rs.getInt(3));
		 // these fields can be null
		 scan.setScanResultIsMalicious(rs.getString(4));
		 scan.setUpdateSignaturesId(rs.getString(5));

		 dbCon.close();
		 return scan;
		} 

		dbCon.close();
		return null;
	}
	
	private boolean isValidScanResult(String scanResult)
	{
		if(scanResult != null && (scanResult.equalsIgnoreCase("T") || scanResult.equalsIgnoreCase("F") )) 
			return true;
		
		return false;
	}
}