package com.progetto_sicurezza.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import com.progetto_sicurezza.dbconfig.DBConfiguration;
import com.progetto_sicurezza.model.ScanPostTrans;

public class ScanPostTransDao
{
	/*
	 * scanPost: tutti i campi di scanPost possono essere null tranne:
	 * idAntiMalware,idMalware,CallIndirection,ChangingClassname, 
	 * ChangingPackage, CodeReorder ,DataEncoding ,
	 * DissAndReass,isJunkNop,JunkNopUncJump,
	 * JunkRandomGarbage,scan.isRepacking,canResultIsMalicious
	 * canResultIsMalicious in set {"T","F"}
	 * 
	 */
	public int insert(ScanPostTrans scanPost) throws SQLException
	{
		// controlli:
		// riferimento not null
		// vincolo not null e di insieme valori
		if(scanPost == null || scanPost.getIdAntiMalware() == null || scanPost.getIdMalware() == null
				|| scanPost.isCallIndirection() == null || scanPost.isChangingClassname() == null
				|| scanPost.isChangingPackage() == null || scanPost.isCodeReorder() == null || scanPost.isDataEncoding() == null
				|| scanPost.isDissAndReass() == null || scanPost.isJunkNop() == null || scanPost.isJunkNopUncJump() == null
				|| scanPost.isJunkRandomGarbage() ==  null|| scanPost.isRepacking() == null
				|| !isValidScanResult(scanPost.getScanResultIsMalicious()) ) throw new IllegalArgumentException();

		Connection dbCon = DriverManager.getConnection(DBConfiguration.DB_URL,DBConfiguration.USERNAME,DBConfiguration.PASSWORD);
		PreparedStatement stmt;
		
        String insert = "INSERT INTO scans_post_transformations (id_malware,id_anti_malware,scan_result_is_malicious," +
        				"disass_and_reass,repacking,call_indirection,changing_package," +
        				"changing_classname,code_reorder,data_encoding,junk_nop,junk_nop_unc_jump," +
        				"junk_random_garbage,signature_update_id)"+
                        "VALUES (" + scanPost.getIdMalware() + "," + 
                          			 scanPost.getIdAntiMalware() +"," +
                          			 "?," +
                          			 scanPost.isDissAndReass() + "," + 
                          			 scanPost.isRepacking() + "," + 
                          			 scanPost.isCallIndirection() + "," + 
                          			 scanPost.isChangingPackage() + "," + 
                          			 scanPost.isChangingClassname() + "," + 
                          			 scanPost.isCodeReorder() + "," + 
                          			 scanPost.isDataEncoding() + "," + 
                          			 scanPost.isJunkNop() + "," + 
                          			 scanPost.isJunkNopUncJump() + "," + 
                          			 scanPost.isJunkRandomGarbage() + "," + 
                          			 "?);";
        
        System.out.println(insert);

        stmt = dbCon.prepareStatement(insert,Statement.RETURN_GENERATED_KEYS);
        stmt.setString(1, scanPost.getScanResultIsMalicious());
        stmt.setString(2, scanPost.getAmSignatureUpdateId());
	    stmt.executeUpdate();
	    
	    ResultSet rs = stmt.getGeneratedKeys();
        if (rs.next() )	
        {	
        	int toRet = rs.getInt(1);
        	dbCon.close();
            return toRet;
        }
        
        // never reached
        dbCon.close();
		return -1;
	}
	
	public ScanPostTrans getScanById(int id) throws SQLException
	{
		if(id <= 0) throw new IllegalArgumentException();

		Connection dbCon = DriverManager.getConnection(DBConfiguration.DB_URL,DBConfiguration.USERNAME,DBConfiguration.PASSWORD);
		Statement stmt;
        ResultSet rs;
        
		String query = "SELECT  * " +
				       "FROM scans_post_transformations "  +
					   "WHERE  id = " + id;
		
		stmt = dbCon.createStatement();
		rs = stmt.executeQuery(query);
		
		if(rs.next())
		{	
		 ScanPostTrans scan = new ScanPostTrans();
		 scan.setId(rs.getInt(4));
		 scan.setIdMalware(rs.getInt(1));
		 scan.setIdAntiMalware(rs.getInt(2));
		 scan.setScanResultIsMalicious(rs.getString(3));
		 
		 scan.setDissAndReass(rs.getBoolean(5));
		 scan.setRepacking(rs.getBoolean(6));
		 scan.setCallIndirection(rs.getBoolean(7));
		 scan.setChangingPackage(rs.getBoolean(8));
		 scan.setChangingClassname(rs.getBoolean(9));
		 scan.setCodeReorder(rs.getBoolean(10));
		 scan.setDataEncoding(rs.getBoolean(11));
		 scan.setJunkNop(rs.getBoolean(12));
		 scan.setJunkNopUncJump(rs.getBoolean(13));
		 scan.setJunkRandomGarbage(rs.getBoolean(14));
		 // these fields can be null
		 scan.setAmSignatureUpdateId(rs.getString(15));
		
		 dbCon.close();
		 return scan;
		}

		dbCon.close();
		return null;
	}
	
	private boolean isValidScanResult(String scanResult)
	{
		if(scanResult != null && (scanResult.equalsIgnoreCase("T") || scanResult.equalsIgnoreCase("F") )) 
			return true;
		
		return false;

	}
}
